import os
import random
import sqlite3
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters, ConversationHandler
import sys
from datetime import datetime
import base64
from urllib.parse import urlparse, parse_qs, unquote
import aiohttp

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('BOT_TOKEN')

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
MAX_FILE_SIZE = 10 * 1024 * 1024  # 10 MB
MAX_LINKS = 1000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫ –≤ —Ñ–∞–π–ª–µ
ALLOWED_EXTENSIONS = ('.txt', '.csv', '.md', '')  # –î–æ–±–∞–≤–ª–µ–Ω–æ –ø—É—Å—Ç–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
DEFAULT_LINES_TO_KEEP = 10  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
CAPTCHA, MENU, SETTINGS, TECH_COMMANDS, OTHER_COMMANDS, USER_MANAGEMENT, MERGE_FILES, SET_LINES, PROCESS_FILE, MANAGE_USERS = range(10)

# –ö–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_CODE = 'YH8jRnO1Np8wVUZobJfwPIv'

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –±–æ—Ç–∞
BOT_DIR = os.path.dirname(os.path.abspath(__file__))
DB_PATH = os.path.join(BOT_DIR, 'bot_users.db')
TEMP_DIR = os.path.join(BOT_DIR, 'temp')
LOG_DIR = os.path.join(BOT_DIR, 'logs')

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
for directory in [TEMP_DIR, LOG_DIR]:
    if not os.path.exists(directory):
        os.makedirs(directory)

def log_error(user_id, error_message):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –≤ —Ñ–∞–π–ª"""
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if not os.path.exists(LOG_DIR):
            os.makedirs(LOG_DIR)
        
        log_file = os.path.join(LOG_DIR, f'error_{datetime.now().strftime("%Y-%m-%d")}.log')
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫–∏
        with open(log_file, 'a', encoding='utf-8') as f:
            f.write(f"[{timestamp}] User {user_id}: {error_message}\n")
            f.flush()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –±—É—Ñ–µ—Ä
            os.fsync(f.fileno())  # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –¥–∏—Å–∫
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
        print(f"[{timestamp}] User {user_id}: {error_message}")

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def setup_database():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    
    c.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            is_verified BOOLEAN DEFAULT FALSE,
            is_admin BOOLEAN DEFAULT FALSE,
            usage_count INTEGER DEFAULT 0,
            merge_count INTEGER DEFAULT 0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    c.execute('''
        CREATE TABLE IF NOT EXISTS bot_status (
            id INTEGER PRIMARY KEY CHECK (id = 1),
            status TEXT DEFAULT 'enabled',
            lines_to_keep INTEGER DEFAULT 10
        )
    ''')
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    c.execute('''
        CREATE TABLE IF NOT EXISTS user_settings (
            user_id INTEGER PRIMARY KEY,
            lines_to_keep INTEGER DEFAULT 10
        )
    ''')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –æ —Å—Ç–∞—Ç—É—Å–µ –±–æ—Ç–∞
    c.execute('SELECT COUNT(*) FROM bot_status')
    if c.fetchone()[0] == 0:
        c.execute('INSERT INTO bot_status (id, status, lines_to_keep) VALUES (1, "enabled", 10)')
    
    conn.commit()
    conn.close()

def is_user_verified(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('SELECT is_verified FROM users WHERE user_id = ?', (user_id,))
    result = c.fetchone()
    conn.close()
    return result[0] if result else False

def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('SELECT is_admin FROM users WHERE user_id = ?', (user_id,))
    result = c.fetchone()
    conn.close()
    return result[0] if result else False

def verify_user(user_id, username):
    """–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω –∞–¥–º–∏–Ω–æ–º
    c.execute('SELECT is_admin FROM users WHERE user_id = ?', (user_id,))
    result = c.fetchone()
    is_admin_status = result[0] if result else False
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∞
    c.execute('''
        INSERT OR REPLACE INTO users (user_id, username, is_verified, is_admin)
        VALUES (?, ?, TRUE, ?)
    ''', (user_id, username, is_admin_status))
    
    conn.commit()
    conn.close()

def is_bot_enabled():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –≤–∫–ª—é—á–µ–Ω –ª–∏ –±–æ—Ç"""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('SELECT status FROM bot_status WHERE id = 1')
    result = c.fetchone()
    conn.close()
    return result[0] == 'enabled' if result else True

def generate_captcha():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–π –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–∞–ø—á–∏"""
    num1 = random.randint(1, 10)
    num2 = random.randint(1, 10)
    operation = random.choice(['+', '-', '*'])
    if operation == '+':
        answer = num1 + num2
    elif operation == '-':
        answer = num1 - num2
    else:
        answer = num1 * num2
    question = f"{num1} {operation} {num2} = ?"
    return question, str(answer)

def get_menu_keyboard(user_id):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –º–µ–Ω—é"""
    keyboard = [
        ['üì§ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª'],
        ['üîÑ –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏'],
        ['‚ÑπÔ∏è –ü–æ–º–æ—â—å', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
        ['‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏']
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_bot_enabled() and not is_admin(update.effective_user.id):
        await update.message.reply_text("–ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
        return ConversationHandler.END
    
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ –∫–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    message_text = update.message.text.strip()
    if message_text.startswith('/start admin'):
        admin_code = message_text.split('admin')[-1].strip()
        if admin_code == ADMIN_CODE:
            conn = sqlite3.connect(DB_PATH)
            c = conn.cursor()
            c.execute('''
                INSERT OR REPLACE INTO users (user_id, username, is_verified, is_admin)
                VALUES (?, ?, TRUE, TRUE)
            ''', (user_id, update.effective_user.username))
            conn.commit()
            conn.close()
            await update.message.reply_text("–í—ã —É—Å–ø–µ—à–Ω–æ —Å—Ç–∞–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")
            await show_menu(update, context)
            return MENU
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if is_user_verified(user_id):
        await show_menu(update, context)
        return MENU
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞–ø—á—É
    captcha_question, captcha_answer = generate_captcha()
    context.user_data['captcha_answer'] = captcha_answer
    
    await update.message.reply_text(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–µ—à–∏—Ç–µ –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä:\n\n{captcha_question}"
    )
    return CAPTCHA

async def check_captcha(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_bot_enabled() and not is_admin(update.effective_user.id):
        await update.message.reply_text("–ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
        return ConversationHandler.END
    
    user_answer = update.message.text.strip()
    correct_answer = context.user_data.get('captcha_answer')
    
    if user_answer == correct_answer:
        # –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        verify_user(update.effective_user.id, update.effective_user.username)
        await show_menu(update, context)
        return MENU
    else:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∫–∞–ø—á—É
        captcha_question, captcha_answer = generate_captcha()
        context.user_data['captcha_answer'] = captcha_answer
        await update.message.reply_text(
            f"–ù–µ–≤–µ—Ä–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:\n\n{captcha_question}"
        )
        return CAPTCHA

async def show_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_menu_keyboard(update.effective_user.id)
    )
    return MENU

async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_bot_enabled() and not is_admin(update.effective_user.id):
        await update.message.reply_text("–ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
        return MENU
    
    text = update.message.text
    
    if text == 'üì§ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª':
        lines_to_keep = get_user_lines_to_keep(update.effective_user.id)
        await update.message.reply_text(
            f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–∞–π–ª —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ (txt, csv –∏–ª–∏ md), '
            f'–∏ —è –≤–µ—Ä–Ω—É –≤–∞–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ {lines_to_keep} —Å—Å—ã–ª–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HTML.\n'
            '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:\n'
            '- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 10 MB\n'
            '- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫: 1000\n'
            '- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: .txt, .csv, .md'
        )
        return PROCESS_FILE
    elif text == 'üîÑ –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏':
        await update.message.reply_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ URL –ø–æ–¥–ø–∏—Å–∫–∏.\n"
            "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ (–º–∏–Ω–∏–º—É–º 2) –Ω–∞–∂–º–∏—Ç–µ '–û–±—ä–µ–¥–∏–Ω–∏—Ç—å'."
        )
        return MERGE_FILES
    elif text == '‚ÑπÔ∏è –ü–æ–º–æ—â—å':
        lines_to_keep = get_user_lines_to_keep(update.effective_user.id)
        await update.message.reply_text(
            "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ñ–∞–π–ª—ã –∏ –æ–±—ä–µ–¥–∏–Ω—è—Ç—å VPN-–ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
            "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n"
            "1. üì§ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏\n"
            "2. üîÑ –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ - –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ VPN-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π\n"
            "3. ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è —Ñ–∞–π–ª–æ–≤: .txt, .csv, .md\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏: VLESS"
        )
    elif text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute('''
            SELECT usage_count, merge_count 
            FROM users 
            WHERE user_id = ?
        ''', (update.effective_user.id,))
        result = c.fetchone()
        conn.close()
        
        files_count = result[0] if result else 0
        merge_count = result[1] if result else 0
        lines_count = get_user_lines_to_keep(update.effective_user.id)
        
        await update.message.reply_text(
            f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            f"üìÅ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {files_count}\n"
            f"üîÑ –û–±—ä–µ–¥–∏–Ω–µ–Ω–æ –ø–æ–¥–ø–∏—Å–æ–∫: {merge_count}\n"
            f"üìè –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {lines_count}"
        )
        return MENU
    elif text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏':
        return await settings_command(update, context)
    
    return MENU

async def settings_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = []
    
    # –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    keyboard.append([KeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫")])
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if is_admin(update.effective_user.id):
        keyboard.extend([
            [KeyboardButton("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã")],
            [KeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")],
            [KeyboardButton("–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π")]
        ])
    
    keyboard.append([KeyboardButton("–ù–∞–∑–∞–¥")])
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=reply_markup)
    return SETTINGS

async def handle_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == "–ù–∞–∑–∞–¥":
        await menu_command(update, context)
        return MENU
        
    elif text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫":
        current_lines = get_user_lines_to_keep(update.effective_user.id)
        await update.message.reply_text(
            f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {current_lines}\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–æ—Ç 1 –¥–æ 1000):",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("–ù–∞–∑–∞–¥")]], resize_keyboard=True)
        )
        return SET_LINES
        
    elif text == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏" and is_admin(update.effective_user.id):
        users = get_all_users()
        verified_count = sum(1 for user in users if user['verified'])
        
        message = f"–í—Å–µ–≥–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {verified_count}\n\n–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        
        for user in users:
            message += f"ID: {user['user_id']}\n"
            message += f"–ò–º—è: {user['username']}\n"
            message += f"–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: {'–î–∞' if user['verified'] else '–ù–µ—Ç'}\n"
            message += f"–ê–¥–º–∏–Ω: {'–î–∞' if user['is_admin'] else '–ù–µ—Ç'}\n"
            message += f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {user['usage_count']}\n\n"
        
        keyboard = [
            [KeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")],
            [KeyboardButton("–ù–∞–∑–∞–¥")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(message, reply_markup=reply_markup)
        return MANAGE_USERS
        
    elif text == "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã" and is_admin(update.effective_user.id):
        keyboard = [
            [KeyboardButton("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")],
            [KeyboardButton("–ù–∞–∑–∞–¥")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∫–æ–º–∞–Ω–¥—É:", reply_markup=reply_markup)
        return TECH_COMMANDS
        
    elif text == "–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π" and is_admin(update.effective_user.id):
        # –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–¥–µ—Å—å
        pass
    
    return SETTINGS

async def process_tech_commands(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        await show_menu(update, context)
        return MENU
    
    text = update.message.text
    
    if text == "–ù–∞–∑–∞–¥":
        await settings_command(update, context)
        return SETTINGS
    elif text == "–í–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞":
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute("UPDATE bot_status SET status='enabled' WHERE id=1")
        conn.commit()
        conn.close()
        await update.message.reply_text("–ë–æ—Ç –≤–∫–ª—é—á–µ–Ω.")
    elif text == "–í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞":
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute("UPDATE bot_status SET status='disabled' WHERE id=1")
        conn.commit()
        conn.close()
        await update.message.reply_text("–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω. –¢–µ–ø–µ—Ä—å –æ–Ω –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏.")
    elif text == "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞":
        await update.message.reply_text("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, systemd –∏–ª–∏ –¥—Ä—É–≥–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç –±–æ—Ç
        sys.exit(0)
    
    return TECH_COMMANDS

async def process_other_commands(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        await show_menu(update, context)
        return MENU
    
    text = update.message.text
    
    if text == "–ù–∞–∑–∞–¥":
        await settings_command(update, context)
        return SETTINGS
    elif text == "–ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
        return OTHER_COMMANDS
    elif text == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏":
        users = get_all_users()
        if not users:
            await update.message.reply_text("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return OTHER_COMMANDS
        
        verified_count = sum(1 for user in users if user[2])  # –ü–æ–¥—Å—á–µ—Ç –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
        user_list = f"–í—Å–µ–≥–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {verified_count}\n\n–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        for user in users:
            user_list += (
                f"ID: {user[0]}\n"
                f"–ò–º—è: {user[1] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: {'–î–∞' if user[2] else '–ù–µ—Ç'}\n"
                f"–ê–¥–º–∏–Ω: {'–î–∞' if user[3] else '–ù–µ—Ç'}\n"
                f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {user[4]}\n\n"
            )
        
        await update.message.reply_text(user_list + "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        return USER_MANAGEMENT
    elif text == "–û–±—ä–µ–¥–∏–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏":
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è:")
        return MERGE_FILES
    elif text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫":
        current_lines = get_user_lines_to_keep(update.effective_user.id)
        await update.message.reply_text(f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {current_lines}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–æ—Ç 1 –¥–æ {MAX_LINKS}):")
        return SET_LINES
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute('SELECT user_id FROM users WHERE is_verified = TRUE')
        users = c.fetchall()
        conn.close()
        
        success_count = 0
        for user_id in users:
            try:
                await context.bot.send_message(chat_id=user_id[0], text=text)
                success_count += 1
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id[0]}: {e}")
        
        await update.message.reply_text(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
        await settings_command(update, context)
        return SETTINGS

async def process_user_management(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = int(update.message.text)
        if user_id == update.effective_user.id:
            await update.message.reply_text("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–µ–±—è.")
            return USER_MANAGEMENT
        
        remove_user(user_id)
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É–¥–∞–ª–µ–Ω.")
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
    
    await settings_command(update, context)
    return SETTINGS

async def fetch_subscription(url):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ URL"""
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                encoded_content = await response.text()
                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏–∑ Base64 –≤ VLESS-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                try:
                    decoded_content = base64.b64decode(encoded_content.strip()).decode('utf-8')
                    return decoded_content
                except:
                    raise ValueError("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏")
            else:
                raise ValueError(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {response.status}")

async def process_merge_files(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("–û–±—ä–µ–¥–∏–Ω–∏—Ç—å")],
        [KeyboardButton("–ù–∞–∑–∞–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    if update.message.text == "–ù–∞–∑–∞–¥":
        if 'subscriptions' in context.user_data:
            del context.user_data['subscriptions']
        await show_menu(update, context)
        return MENU
        
    if update.message.text == "–û–±—ä–µ–¥–∏–Ω–∏—Ç—å":
        if len(context.user_data.get('subscriptions', [])) < 2:
            await update.message.reply_text(
                "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–∏–Ω–∏–º—É–º 2 –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è.",
                reply_markup=reply_markup
            )
            return MERGE_FILES
            
        try:
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
            merged_text = "\n".join(context.user_data['subscriptions'])
            # –®–∏—Ñ—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ Base64
            encoded_result = base64.b64encode(merged_text.encode()).decode()
            
            await update.message.reply_text(
                "–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ (–Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å):\n\n"
                f"`{encoded_result}`",
                parse_mode=ParseMode.MARKDOWN
            )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
            del context.user_data['subscriptions']
            await show_menu(update, context)
            return MENU
        except Exception as e:
            logger.error(f"Error merging subscriptions: {e}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫.",
                reply_markup=reply_markup
            )
            return MERGE_FILES
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    subscription_url = update.message.text.strip()
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É —Å —Å–∞–π—Ç–∞
        async with aiohttp.ClientSession() as session:
            async with session.get(subscription_url) as response:
                if response.status == 200:
                    # –ü–æ–ª—É—á–∞–µ–º Base64 —Å—Ç—Ä–æ–∫—É
                    encoded_subscription = await response.text()
                    # 2. –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º Base64
                    decoded_subscription = base64.b64decode(encoded_subscription).decode()
                    
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                    if 'subscriptions' not in context.user_data:
                        context.user_data['subscriptions'] = []
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
                    context.user_data['subscriptions'].append(decoded_subscription)
                    count = len(context.user_data['subscriptions'])
                    
                    await update.message.reply_text(
                        f"–ü–æ–ª—É—á–µ–Ω–æ –ø–æ–¥–ø–∏—Å–æ–∫: {count}\n"
                        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û–±—ä–µ–¥–∏–Ω–∏—Ç—å' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
                        reply_markup=reply_markup
                    )
                else:
                    await update.message.reply_text(
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                        reply_markup=reply_markup
                    )
    except Exception as e:
        logger.error(f"Error processing subscription: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=reply_markup
        )
    
    return MERGE_FILES

def merge_vless_subscriptions(subscriptions):
    """–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ VLESS-–ø–æ–¥–ø–∏—Å–æ–∫"""
    merged_configs = []
    
    for i, sub in enumerate(subscriptions, 1):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç VLESS
            if not sub.startswith('vless://'):
                continue
                
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ —Å–ø–∏—Å–æ–∫, –æ–±–Ω–æ–≤–ª—è—è –Ω–∞–∑–≤–∞–Ω–∏–µ
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
            if '#' in sub:
                base_sub, name = sub.rsplit('#', 1)
                new_sub = f"{base_sub}#Merged-{i}-{name}"
            else:
                new_sub = f"{sub}#Merged-{i}"
            
            merged_configs.append(new_sub)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {str(e)}")
            continue
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    return '\n'.join(merged_configs)

async def process_set_lines(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "–ù–∞–∑–∞–¥":
        await settings_command(update, context)
        return SETTINGS

    try:
        lines = int(update.message.text)
        if 1 <= lines <= MAX_LINKS:
            if is_admin(update.effective_user.id):
                # –ê–¥–º–∏–Ω –º–µ–Ω—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                set_lines_to_keep(lines)
                await update.message.reply_text(f"–ì–ª–æ–±–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {lines}")
            else:
                # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ–Ω—è–µ—Ç —Å–≤–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                set_user_lines_to_keep(update.effective_user.id, lines)
                await update.message.reply_text(f"–í–∞—à–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {lines}")
            await settings_command(update, context)
            return SETTINGS
        else:
            await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {MAX_LINKS}")
            return SET_LINES
    except ValueError:
        if update.message.text == "–ù–∞–∑–∞–¥":
            await settings_command(update, context)
            return SETTINGS
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return SET_LINES

async def process_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
    if not is_bot_enabled() and not is_admin(update.effective_user.id):
        await update.message.reply_text("–ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
        return MENU
    
    if not is_user_verified(update.effective_user.id):
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start"
        )
        return MENU

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
        if not update.message.document:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª.")
            return PROCESS_FILE

        document = update.message.document
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        file_name = document.file_name.lower()
        if not any(file_name.endswith(ext) for ext in ALLOWED_EXTENSIONS):
            await update.message.reply_text(
                f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ: {', '.join(ALLOWED_EXTENSIONS)}"
            )
            return PROCESS_FILE

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        if document.file_size > MAX_FILE_SIZE:
            await update.message.reply_text(
                f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_FILE_SIZE // (1024 * 1024)} MB"
            )
            return PROCESS_FILE

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await context.bot.get_file(document.file_id)
        downloaded_file = await file.download_as_bytearray()
        
        try:
            content = downloaded_file.decode('utf-8')
        except UnicodeDecodeError:
            try:
                content = downloaded_file.decode('windows-1251')
            except UnicodeDecodeError:
                await update.message.reply_text(
                    "–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ UTF-8 –∏–ª–∏ Windows-1251."
                )
                return PROCESS_FILE

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞
        lines = [line.strip() for line in content.splitlines() if line.strip()]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫
        if len(lines) > MAX_LINKS:
            await update.message.reply_text(
                f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ: {MAX_LINKS}"
            )
            return PROCESS_FILE

        if not lines:
            await update.message.reply_text(
                "–§–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫."
            )
            return PROCESS_FILE

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lines_to_keep = get_user_lines_to_keep(update.effective_user.id)
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å—Ç—Ä–æ–∫
        last_lines = lines[-lines_to_keep:]
        
        # –°–æ–∑–¥–∞–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏
        original_name = os.path.splitext(document.file_name)[0]  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        output_filename = os.path.join(TEMP_DIR, f'{original_name}_{update.effective_user.id}.html')
        
        try:
            with open(output_filename, 'w', encoding='utf-8') as f:
                f.write('\n'.join(last_lines))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            with open(output_filename, 'rb') as f:
                await context.bot.send_document(
                    chat_id=update.effective_chat.id,
                    document=f,
                    filename=f'{original_name}.html',  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è
                    caption=f"–ù–∞–π–¥–µ–Ω–æ {len(lines)} —Å—Ç—Ä–æ–∫. –ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ {lines_to_keep}."
                )
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(output_filename):
                os.remove(output_filename)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_menu(update, context)
        return MENU
        
    except Exception as e:
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}"
        log_error(update.effective_user.id, error_message)
        print(f"Error for user {update.effective_user.id}: {error_message}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return PROCESS_FILE

def get_user_lines_to_keep(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('SELECT lines_to_keep FROM user_settings WHERE user_id = ?', (user_id,))
    result = c.fetchone()
    conn.close()
    return result[0] if result else DEFAULT_LINES_TO_KEEP

def set_user_lines_to_keep(user_id, lines):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('INSERT OR REPLACE INTO user_settings (user_id, lines_to_keep) VALUES (?, ?)', 
              (user_id, lines))
    conn.commit()
    conn.close()

def get_all_users():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('''
        SELECT user_id, username, verified, is_admin, usage_count 
        FROM users
    ''')
    users = []
    for row in c.fetchall():
        users.append({
            'user_id': row[0],
            'username': row[1],
            'verified': bool(row[2]),
            'is_admin': bool(row[3]),
            'usage_count': row[4]
        })
    conn.close()
    return users

def remove_user(user_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('DELETE FROM users WHERE user_id = ?', (user_id,))
    conn.commit()
    conn.close()

def get_lines_to_keep():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('SELECT lines_to_keep FROM bot_status WHERE id = 1')
    result = c.fetchone()
    conn.close()
    return result[0] if result else DEFAULT_LINES_TO_KEEP

def set_lines_to_keep(lines):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('UPDATE bot_status SET lines_to_keep = ? WHERE id = 1', (lines,))
    conn.commit()
    conn.close()

def increment_usage_count(user_id):
    """–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞"""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('UPDATE users SET usage_count = usage_count + 1 WHERE user_id = ?', (user_id,))
    conn.commit()
    conn.close()

def increment_merge_count(user_id):
    """–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('UPDATE users SET merge_count = merge_count + 1 WHERE user_id = ?', (user_id,))
    conn.commit()
    conn.close()

def main():
    # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    setup_database()
    
    async def restore_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –¥–ª—è –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if is_user_verified(update.effective_user.id):
            if not is_bot_enabled() and not is_admin(update.effective_user.id):
                await update.message.reply_text("–ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
                return ConversationHandler.END
            await show_menu(update, context)
            return MENU
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
            return ConversationHandler.END
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('start', start),
            MessageHandler(filters.TEXT & ~filters.COMMAND, restore_menu),
            MessageHandler(filters.Document.ALL, restore_menu)
        ],
        states={
            CAPTCHA: [MessageHandler(filters.TEXT & ~filters.COMMAND, check_captcha)],
            MENU: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu)
            ],
            PROCESS_FILE: [
                MessageHandler(filters.Document.ALL, process_file),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu)
            ],
            SETTINGS: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_settings)],
            TECH_COMMANDS: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_tech_commands)],
            OTHER_COMMANDS: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_other_commands)],
            USER_MANAGEMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_user_management)],
            MERGE_FILES: [
                MessageHandler(filters.Document.ALL | filters.TEXT & ~filters.COMMAND, process_merge_files)
            ],
            SET_LINES: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_set_lines)],
            MANAGE_USERS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_manage_users)
            ]
        },
        fallbacks=[
            CommandHandler('start', start),
            MessageHandler(filters.TEXT & ~filters.COMMAND, restore_menu),
            MessageHandler(filters.Document.ALL, restore_menu)
        ]
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    application.add_handler(conv_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DB_PATH}")
    print(f"–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {TEMP_DIR}")
    print(f"–õ–æ–≥–∏: {LOG_DIR}")
    application.run_polling()

if __name__ == '__main__':
    main() 